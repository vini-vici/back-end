# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Vicci Back-End. Very simple setup using the NodeJS and the SAM CLI.

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31

Parameters:
  Stage:
    Type: String
    Default: alpha
    AllowedValues: ["alpha", "beta", "gamma", "prod"]
    Description: current deployable stage.  

Conditions:
  isProd: !Not [!Equals [!Ref Stage, prod]]
  
Globals:
  Function:
    Runtime: nodejs14.x
# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:

  # The Api Gateway necessary for the authorizers.
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !ImportValue  UserPoolArn
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-items.js
  GetTodosFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get.getHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TodosTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TODOS_TABLE: !Ref TodosTable
          NODE_ENV: !If [isProd, 'production', 'development']
          REGION: !Ref AWS::Region
      Events:
        GetApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /
            Method: GET
        SingleApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /{id}
            Method: GET
  PutTodosFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/add.putItemHandler
      Description: Adds a todo.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodosTable
      Environment:
        Variables:
          TODOS_TABLE: !Ref TodosTable
          NODE_ENV: !If [isProd, 'production', 'development']
          REGION: !Ref AWS::Region
      Events:
        PutTodo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /
            Method: PUT
  DeleteTodosFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete.deleteHandler
      Description: Removes a todo.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodosTable
      Environment:
        Variables:
          TODOS_TABLE: !Ref TodosTable
          NODE_ENV: !If [isProd, 'production', 'development']
          REGION: !Ref AWS::Region
      Events:
        DeleteTodo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /{id}
            Method: DELETE

  UpdateTodosFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/update.updateHandler
      Description: Updates a todo.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodosTable
      Environment:
        Variables:
          TODOS_TABLE: !Ref TodosTable
          NODE_ENV: !If [isProd, 'production', 'development']
          REGION: !Ref AWS::Region
      Events:
        UpdateTodo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /{id}
            Method: POST

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  TodosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # Self explanatory
      TableName: todos
      # Need an ID and for faster scanning, a user_id
      AttributeDefinitions: 
        - AttributeName: id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      # Which keys do what on this table.
      # the id key is a hash, aka a straight look up.
      # the user_id is a range, aka it could be a way to simplify things down
      # after using the ID key to pull values.
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: user_id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
    Export:
      Name: ApiEndpoint-V2
